winner_lab = paste(winner_type, ": ", winner_percent, sep='')
winner_lab <- paste(winner_lab, '%', sep='')
pie(table(data_reduced$Winner),labels=winner_lab, main='Pie chart with percentage of Winner types')
par(mfrow = c(2, 2))
#num_cols= logical(0)
#for(i in 1:ncol(data_reduced)){
#  num_cols = append(num_cols, is.numeric(data_reduced[,i]))
#}
plot(data_reduced$B_avg_SIG_STR_att, data_reduced$B_avg_SIG_STR_landed)
plot(data_reduced$B_avg_TOTAL_STR_att, data_reduced$B_avg_TOTAL_STR_landed)
plot(data_reduced$B_avg_HEAD_att, data_reduced$B_avg_HEAD_landed)
plot(data_reduced$B_avg_BODY_att, data_reduced$B_avg_BODY_landed)
cor(data_reduced$B_avg_SIG_STR_att, data_reduced$B_avg_SIG_STR_landed)
cor(data_reduced$B_avg_TOTAL_STR_att, data_reduced$B_avg_TOTAL_STR_landed)
cor(data_reduced$B_avg_HEAD_att, data_reduced$B_avg_HEAD_landed)
cor(data_reduced$B_avg_BODY_att, data_reduced$B_avg_BODY_landed)
par(mfrow = c(2, 2))
plot(data_reduced$B_avg_LEG_att, data_reduced$B_avg_LEG_landed)
plot(data_reduced$B_avg_DISTANCE_att, data_reduced$B_avg_DISTANCE_landed)
plot(data_reduced$B_avg_CLINCH_att, data_reduced$B_avg_CLINCH_landed)
plot(data_reduced$B_avg_GROUND_att, data_reduced$B_avg_GROUND_landed)
cor(data_reduced$B_avg_LEG_att, data_reduced$B_avg_LEG_landed)
cor(data_reduced$B_avg_DISTANCE_att, data_reduced$B_avg_DISTANCE_landed)
cor(data_reduced$B_avg_CLINCH_att, data_reduced$B_avg_CLINCH_landed)
cor(data_reduced$B_avg_GROUND_att, data_reduced$B_avg_GROUND_landed)
# Drop "strikes attempted" columns
str_types = c("STR", "HEAD", "BODY", "LEG", "DISTANCE", "CLINCH", "GROUND")
for(i in 1:length(str_types)){
str = paste(str_types[i], "_att", sep="")
att_col = sapply(colnames(data_reduced), str_detect, regex(str))
data_reduced = data_reduced[, !(att_col)]
}
par(mfrow=c(2, 2))
plot(data_reduced$B_avg_TOTAL_STR_landed, data_reduced$B_avg_SIG_STR_landed)
plot(data_reduced$R_avg_TOTAL_STR_landed, data_reduced$R_avg_SIG_STR_landed)
cor(data_reduced$B_avg_SIG_STR_landed, data_reduced$B_avg_TOTAL_STR_landed)
cor(data_reduced$R_avg_SIG_STR_landed, data_reduced$R_avg_TOTAL_STR_landed)
# Drop columns of # of total strikes
tot_col = sapply(colnames(data_reduced), str_detect, regex("TOTAL_STR"))
data_reduced = data_reduced[, !(tot_col)]
plot(data_reduced$B_avg_TD_att, data_reduced$B_avg_TD_landed)
cor(data_reduced$B_avg_TD_att, data_reduced$B_avg_TD_landed)
# Drop columns of # of TD landed
td_land_col = sapply(colnames(data_reduced), str_detect, regex("TD_landed"))
data_reduced = data_reduced[, !(td_land_col)]
par(mfrow = c(2, 2))
plot(data_reduced$B_Height_cms, data_reduced$B_Reach_cms)
plot(data_reduced$R_Height_cms, data_reduced$R_Reach_cms)
cor(data_reduced$B_Height_cms, data_reduced$B_Reach_cms)
cor(data_reduced$R_Height_cms, data_reduced$R_Reach_cms)
# Drop columns of # of total strikes
tot_col = sapply(colnames(data_reduced), str_detect, regex("Height"))
data_reduced = data_reduced[, !(tot_col)]
# # Remove columns of sig strikes landed
# sig_landed_col = sapply(colnames(data_reduced), str_detect, regex("SIG_STR_landed"))
# data_reduced = data_reduced[, !(sig_landed_col)]
# #Remove strikes landed on each body part or (in each position)
# #str_types = c("DISTANCE", "CLINCH", "GROUND")
# str_types = c("HEAD", "BODY", "LEG")
# for(i in 1:length(str_types)){
#   str = paste(str_types[i], "_landed", sep="")
#   att_col = sapply(colnames(data_reduced), str_detect, regex(str))
#   data_reduced = data_reduced[, !(att_col)]
# }
# Remove columns of wins
# wins_col = sapply(colnames(data_reduced), str_detect, regex("_wins$"))
# data_reduced = data_reduced[, !(wins_col)]
party = c("B", "R")
# Add two new merged columns
for(p in party){
if(p == "B"){
B_current_streak = data_reduced$B_current_win_streak + (-1)*data_reduced$B_current_lose_streak
data_reduced = cbind(data_reduced, B_current_streak)
}else{
R_current_streak = data_reduced$R_current_win_streak + (-1)*data_reduced$R_current_lose_streak
data_reduced = cbind(data_reduced, R_current_streak)
}
}
# Remove original columns
streak_drop = c("B_current_win_streak", "B_current_lose_streak", "R_current_win_streak", "R_current_lose_streak")
data_reduced = data_reduced[, !(colnames(data_reduced) %in% streak_drop)]
decision_type = c("Majority", "Split", "Unanimous")
# Sum up num of three kind of decision wins of B
B_win_by_Decision = numeric(nrow(data_reduced))
for(type in decision_type){
B_win_by_Decision = B_win_by_Decision + data_reduced[, paste("B_win_by_Decision_", type, sep = "")]
}
data_reduced = cbind(data_reduced, B_win_by_Decision)
# Sum up num of three kind of decision wins of R
R_win_by_Decision = numeric(nrow(data_reduced))
for(type in decision_type){
R_win_by_Decision = R_win_by_Decision + data_reduced[, paste("R_win_by_Decision_", type, sep = "")]
}
data_reduced = cbind(data_reduced, R_win_by_Decision)
# Remove original columns
dec_col = sapply(colnames(data_reduced), str_detect, regex("win_by_Decision_"))
data_reduced = data_reduced[, !(dec_col)]
# For ML methods
data_reduced = data_reduced[, c(1:26, 51, 53, 55, 27:50, 52, 54, 56)]
filename = "data_ML.csv"
# For statistical learning methods
# data_reduced = data_reduced[, c(1:21, 41, 43, 45, 22:40, 42, 44, 46)]
# #filename = "data_body_logit.csv"
# filename = "data_position_logit.csv"
# Delete some more columns here
drop_col = c("avg_SIG_STR_pct", "avg_TD_pct", "REV", "total_time_fought", "total_round_fought", "Stance")
for(i in 1:length(drop_col)){
att_col = sapply(colnames(data_reduced), str_detect, regex(drop_col[i]))
data_reduced = data_reduced[, !(att_col)]
}
newcomer_fights = which(((data_reduced$B_wins+data_reduced$B_losses) <= 3) | ((data_reduced$R_wins+data_reduced$R_losses) <= 3))
data_reduced = data_reduced[(-1)*newcomer_fights, ]
write.csv(data_reduced, filename, row.names = FALSE)
# Read the file
library(stringr)
data = read.csv("./ufc_data.csv")
data = data[1:4727, ]
newcomer_fights = which(((data_reduced$B_wins+data_reduced$B_losses) <= 3) | ((data_reduced$R_wins+data_reduced$R_losses) <= 3))
# Read the file
library(stringr)
data = read.csv("./ufc_data.csv")
data = data[1:4727, ]
newcomer_fights = which(((data_reduced$B_wins+data_reduced$B_losses) <= 3) | ((data_reduced$R_wins+data_reduced$R_losses) <= 3))
# Read the file
library(stringr)
data = read.csv("./ufc_data.csv")
data = data[1:4727, ]
newcomer_fights = which(((data$B_wins+data$B_losses) <= 3) | ((data$R_wins+data$R_losses) <= 3))
data = data[(-1)*newcomer_fights, ]
# Drop some irrelevent columns
drop = c("R_fighter", "B_fighter", "Referee", "date", "location", "title_bout")
data_reduced = data[, !(colnames(data) %in% drop)]
# Drop columns related to previous opponents
opp_col = sapply(colnames(data_reduced), str_detect, regex("opp"))
data_reduced = data_reduced[, !(opp_col)]
# Omit rows with NA
data_reduced = na.omit(data_reduced)
# Drop weight column
w_col = sapply(colnames(data_reduced), str_detect, regex("Weight"))
data_reduced = data_reduced[, !(w_col)]
# Drop weight column
draw_col = sapply(colnames(data_reduced), str_detect, regex("draw"))
data_reduced = data_reduced[, !(draw_col)]
n = nrow(data_reduced)
winner_type = levels(as.factor(data_reduced$Winner))
winner_percent = 100*table(data_reduced$Winner)/n
winner_lab = paste(winner_type, ": ", winner_percent, sep='')
winner_lab <- paste(winner_lab, '%', sep='')
pie(table(data_reduced$Winner),labels=winner_lab, main='Pie chart with percentage of Winner types')
data_reduced = data_reduced[data_reduced$Winner != "Draw",]
# # Copy the entire dataset and swap everything related to Red and Blue
# data_switch = data_reduced[, c(1, 2, 43:82, 3:42, 83, 84)]
# colnames(data_switch) = colnames(data_reduced)
# blue_idx = data_reduced$Winner == "Blue"
# red_idx = data_reduced$Winner == "Red"
# data_switch$Winner[blue_idx] = "Red"
# data_switch$Winner[red_idx] = "Blue"
#
# # Concat the two dataframes
# data_reduced = rbind(data_reduced, data_switch)
n = nrow(data_reduced)
winner_type = levels(as.factor(data_reduced$Winner))
winner_percent = 100*table(data_reduced$Winner)/n
winner_lab = paste(winner_type, ": ", winner_percent, sep='')
winner_lab <- paste(winner_lab, '%', sep='')
pie(table(data_reduced$Winner),labels=winner_lab, main='Pie chart with percentage of Winner types')
par(mfrow = c(2, 2))
#num_cols= logical(0)
#for(i in 1:ncol(data_reduced)){
#  num_cols = append(num_cols, is.numeric(data_reduced[,i]))
#}
plot(data_reduced$B_avg_SIG_STR_att, data_reduced$B_avg_SIG_STR_landed)
plot(data_reduced$B_avg_TOTAL_STR_att, data_reduced$B_avg_TOTAL_STR_landed)
plot(data_reduced$B_avg_HEAD_att, data_reduced$B_avg_HEAD_landed)
plot(data_reduced$B_avg_BODY_att, data_reduced$B_avg_BODY_landed)
cor(data_reduced$B_avg_SIG_STR_att, data_reduced$B_avg_SIG_STR_landed)
cor(data_reduced$B_avg_TOTAL_STR_att, data_reduced$B_avg_TOTAL_STR_landed)
cor(data_reduced$B_avg_HEAD_att, data_reduced$B_avg_HEAD_landed)
cor(data_reduced$B_avg_BODY_att, data_reduced$B_avg_BODY_landed)
par(mfrow = c(2, 2))
plot(data_reduced$B_avg_LEG_att, data_reduced$B_avg_LEG_landed)
plot(data_reduced$B_avg_DISTANCE_att, data_reduced$B_avg_DISTANCE_landed)
plot(data_reduced$B_avg_CLINCH_att, data_reduced$B_avg_CLINCH_landed)
plot(data_reduced$B_avg_GROUND_att, data_reduced$B_avg_GROUND_landed)
cor(data_reduced$B_avg_LEG_att, data_reduced$B_avg_LEG_landed)
cor(data_reduced$B_avg_DISTANCE_att, data_reduced$B_avg_DISTANCE_landed)
cor(data_reduced$B_avg_CLINCH_att, data_reduced$B_avg_CLINCH_landed)
cor(data_reduced$B_avg_GROUND_att, data_reduced$B_avg_GROUND_landed)
# Drop "strikes attempted" columns
str_types = c("STR", "HEAD", "BODY", "LEG", "DISTANCE", "CLINCH", "GROUND")
for(i in 1:length(str_types)){
str = paste(str_types[i], "_att", sep="")
att_col = sapply(colnames(data_reduced), str_detect, regex(str))
data_reduced = data_reduced[, !(att_col)]
}
par(mfrow=c(2, 2))
plot(data_reduced$B_avg_TOTAL_STR_landed, data_reduced$B_avg_SIG_STR_landed)
plot(data_reduced$R_avg_TOTAL_STR_landed, data_reduced$R_avg_SIG_STR_landed)
cor(data_reduced$B_avg_SIG_STR_landed, data_reduced$B_avg_TOTAL_STR_landed)
cor(data_reduced$R_avg_SIG_STR_landed, data_reduced$R_avg_TOTAL_STR_landed)
# Drop columns of # of total strikes
tot_col = sapply(colnames(data_reduced), str_detect, regex("TOTAL_STR"))
data_reduced = data_reduced[, !(tot_col)]
plot(data_reduced$B_avg_TD_att, data_reduced$B_avg_TD_landed)
cor(data_reduced$B_avg_TD_att, data_reduced$B_avg_TD_landed)
# Drop columns of # of TD landed
td_land_col = sapply(colnames(data_reduced), str_detect, regex("TD_landed"))
data_reduced = data_reduced[, !(td_land_col)]
par(mfrow = c(2, 2))
plot(data_reduced$B_Height_cms, data_reduced$B_Reach_cms)
plot(data_reduced$R_Height_cms, data_reduced$R_Reach_cms)
cor(data_reduced$B_Height_cms, data_reduced$B_Reach_cms)
cor(data_reduced$R_Height_cms, data_reduced$R_Reach_cms)
# Drop columns of # of total strikes
tot_col = sapply(colnames(data_reduced), str_detect, regex("Height"))
data_reduced = data_reduced[, !(tot_col)]
# Remove columns of sig strikes landed
sig_landed_col = sapply(colnames(data_reduced), str_detect, regex("SIG_STR_landed"))
data_reduced = data_reduced[, !(sig_landed_col)]
#Remove strikes landed on each body part or (in each position)
#str_types = c("DISTANCE", "CLINCH", "GROUND")
str_types = c("HEAD", "BODY", "LEG")
for(i in 1:length(str_types)){
str = paste(str_types[i], "_landed", sep="")
att_col = sapply(colnames(data_reduced), str_detect, regex(str))
data_reduced = data_reduced[, !(att_col)]
}
# Remove columns of wins
wins_col = sapply(colnames(data_reduced), str_detect, regex("_wins$"))
data_reduced = data_reduced[, !(wins_col)]
party = c("B", "R")
# Add two new merged columns
for(p in party){
if(p == "B"){
B_current_streak = data_reduced$B_current_win_streak + (-1)*data_reduced$B_current_lose_streak
data_reduced = cbind(data_reduced, B_current_streak)
}else{
R_current_streak = data_reduced$R_current_win_streak + (-1)*data_reduced$R_current_lose_streak
data_reduced = cbind(data_reduced, R_current_streak)
}
}
# Remove original columns
streak_drop = c("B_current_win_streak", "B_current_lose_streak", "R_current_win_streak", "R_current_lose_streak")
data_reduced = data_reduced[, !(colnames(data_reduced) %in% streak_drop)]
decision_type = c("Majority", "Split", "Unanimous")
# Sum up num of three kind of decision wins of B
B_win_by_Decision = numeric(nrow(data_reduced))
for(type in decision_type){
B_win_by_Decision = B_win_by_Decision + data_reduced[, paste("B_win_by_Decision_", type, sep = "")]
}
data_reduced = cbind(data_reduced, B_win_by_Decision)
# Sum up num of three kind of decision wins of R
R_win_by_Decision = numeric(nrow(data_reduced))
for(type in decision_type){
R_win_by_Decision = R_win_by_Decision + data_reduced[, paste("R_win_by_Decision_", type, sep = "")]
}
data_reduced = cbind(data_reduced, R_win_by_Decision)
# Remove original columns
dec_col = sapply(colnames(data_reduced), str_detect, regex("win_by_Decision_"))
data_reduced = data_reduced[, !(dec_col)]
# For ML methods
# data_reduced = data_reduced[, c(1:26, 51, 53, 55, 27:50, 52, 54, 56)]
# filename = "data_ML.csv"
# For statistical learning methods
data_reduced = data_reduced[, c(1:21, 41, 43, 45, 22:40, 42, 44, 46)]
#filename = "data_body_logit.csv"
filename = "data_position_logit.csv"
# Delete some more columns here
drop_col = c("avg_SIG_STR_pct", "avg_TD_pct", "REV", "total_time_fought", "total_round_fought", "Stance")
for(i in 1:length(drop_col)){
att_col = sapply(colnames(data_reduced), str_detect, regex(drop_col[i]))
data_reduced = data_reduced[, !(att_col)]
}
write.csv(data_reduced, filename, row.names = FALSE)
# Read the file
library(stringr)
data = read.csv("./ufc_data.csv")
data = data[1:4727, ]
newcomer_fights = which(((data$B_wins+data$B_losses) <= 3) | ((data$R_wins+data$R_losses) <= 3))
data = data[(-1)*newcomer_fights, ]
# Drop some irrelevent columns
drop = c("R_fighter", "B_fighter", "Referee", "date", "location", "title_bout")
data_reduced = data[, !(colnames(data) %in% drop)]
# Drop columns related to previous opponents
opp_col = sapply(colnames(data_reduced), str_detect, regex("opp"))
data_reduced = data_reduced[, !(opp_col)]
# Omit rows with NA
data_reduced = na.omit(data_reduced)
# Drop weight column
w_col = sapply(colnames(data_reduced), str_detect, regex("Weight"))
data_reduced = data_reduced[, !(w_col)]
# Drop weight column
draw_col = sapply(colnames(data_reduced), str_detect, regex("draw"))
data_reduced = data_reduced[, !(draw_col)]
n = nrow(data_reduced)
winner_type = levels(as.factor(data_reduced$Winner))
winner_percent = 100*table(data_reduced$Winner)/n
winner_lab = paste(winner_type, ": ", winner_percent, sep='')
winner_lab <- paste(winner_lab, '%', sep='')
pie(table(data_reduced$Winner),labels=winner_lab, main='Pie chart with percentage of Winner types')
data_reduced = data_reduced[data_reduced$Winner != "Draw",]
# # Copy the entire dataset and swap everything related to Red and Blue
# data_switch = data_reduced[, c(1, 2, 43:82, 3:42, 83, 84)]
# colnames(data_switch) = colnames(data_reduced)
# blue_idx = data_reduced$Winner == "Blue"
# red_idx = data_reduced$Winner == "Red"
# data_switch$Winner[blue_idx] = "Red"
# data_switch$Winner[red_idx] = "Blue"
#
# # Concat the two dataframes
# data_reduced = rbind(data_reduced, data_switch)
n = nrow(data_reduced)
winner_type = levels(as.factor(data_reduced$Winner))
winner_percent = 100*table(data_reduced$Winner)/n
winner_lab = paste(winner_type, ": ", winner_percent, sep='')
winner_lab <- paste(winner_lab, '%', sep='')
pie(table(data_reduced$Winner),labels=winner_lab, main='Pie chart with percentage of Winner types')
par(mfrow = c(2, 2))
#num_cols= logical(0)
#for(i in 1:ncol(data_reduced)){
#  num_cols = append(num_cols, is.numeric(data_reduced[,i]))
#}
plot(data_reduced$B_avg_SIG_STR_att, data_reduced$B_avg_SIG_STR_landed)
plot(data_reduced$B_avg_TOTAL_STR_att, data_reduced$B_avg_TOTAL_STR_landed)
plot(data_reduced$B_avg_HEAD_att, data_reduced$B_avg_HEAD_landed)
plot(data_reduced$B_avg_BODY_att, data_reduced$B_avg_BODY_landed)
cor(data_reduced$B_avg_SIG_STR_att, data_reduced$B_avg_SIG_STR_landed)
cor(data_reduced$B_avg_TOTAL_STR_att, data_reduced$B_avg_TOTAL_STR_landed)
cor(data_reduced$B_avg_HEAD_att, data_reduced$B_avg_HEAD_landed)
cor(data_reduced$B_avg_BODY_att, data_reduced$B_avg_BODY_landed)
par(mfrow = c(2, 2))
plot(data_reduced$B_avg_LEG_att, data_reduced$B_avg_LEG_landed)
plot(data_reduced$B_avg_DISTANCE_att, data_reduced$B_avg_DISTANCE_landed)
plot(data_reduced$B_avg_CLINCH_att, data_reduced$B_avg_CLINCH_landed)
plot(data_reduced$B_avg_GROUND_att, data_reduced$B_avg_GROUND_landed)
cor(data_reduced$B_avg_LEG_att, data_reduced$B_avg_LEG_landed)
cor(data_reduced$B_avg_DISTANCE_att, data_reduced$B_avg_DISTANCE_landed)
cor(data_reduced$B_avg_CLINCH_att, data_reduced$B_avg_CLINCH_landed)
cor(data_reduced$B_avg_GROUND_att, data_reduced$B_avg_GROUND_landed)
# Drop "strikes attempted" columns
str_types = c("STR", "HEAD", "BODY", "LEG", "DISTANCE", "CLINCH", "GROUND")
for(i in 1:length(str_types)){
str = paste(str_types[i], "_att", sep="")
att_col = sapply(colnames(data_reduced), str_detect, regex(str))
data_reduced = data_reduced[, !(att_col)]
}
par(mfrow=c(2, 2))
plot(data_reduced$B_avg_TOTAL_STR_landed, data_reduced$B_avg_SIG_STR_landed)
plot(data_reduced$R_avg_TOTAL_STR_landed, data_reduced$R_avg_SIG_STR_landed)
cor(data_reduced$B_avg_SIG_STR_landed, data_reduced$B_avg_TOTAL_STR_landed)
cor(data_reduced$R_avg_SIG_STR_landed, data_reduced$R_avg_TOTAL_STR_landed)
# Drop columns of # of total strikes
tot_col = sapply(colnames(data_reduced), str_detect, regex("TOTAL_STR"))
data_reduced = data_reduced[, !(tot_col)]
plot(data_reduced$B_avg_TD_att, data_reduced$B_avg_TD_landed)
cor(data_reduced$B_avg_TD_att, data_reduced$B_avg_TD_landed)
# Drop columns of # of TD landed
td_land_col = sapply(colnames(data_reduced), str_detect, regex("TD_landed"))
data_reduced = data_reduced[, !(td_land_col)]
par(mfrow = c(2, 2))
plot(data_reduced$B_Height_cms, data_reduced$B_Reach_cms)
plot(data_reduced$R_Height_cms, data_reduced$R_Reach_cms)
cor(data_reduced$B_Height_cms, data_reduced$B_Reach_cms)
cor(data_reduced$R_Height_cms, data_reduced$R_Reach_cms)
# Drop columns of # of total strikes
tot_col = sapply(colnames(data_reduced), str_detect, regex("Height"))
data_reduced = data_reduced[, !(tot_col)]
# Remove columns of sig strikes landed
sig_landed_col = sapply(colnames(data_reduced), str_detect, regex("SIG_STR_landed"))
data_reduced = data_reduced[, !(sig_landed_col)]
#Remove strikes landed on each body part or (in each position)
str_types = c("DISTANCE", "CLINCH", "GROUND")
#str_types = c("HEAD", "BODY", "LEG")
for(i in 1:length(str_types)){
str = paste(str_types[i], "_landed", sep="")
att_col = sapply(colnames(data_reduced), str_detect, regex(str))
data_reduced = data_reduced[, !(att_col)]
}
# Remove columns of wins
wins_col = sapply(colnames(data_reduced), str_detect, regex("_wins$"))
data_reduced = data_reduced[, !(wins_col)]
party = c("B", "R")
# Add two new merged columns
for(p in party){
if(p == "B"){
B_current_streak = data_reduced$B_current_win_streak + (-1)*data_reduced$B_current_lose_streak
data_reduced = cbind(data_reduced, B_current_streak)
}else{
R_current_streak = data_reduced$R_current_win_streak + (-1)*data_reduced$R_current_lose_streak
data_reduced = cbind(data_reduced, R_current_streak)
}
}
# Remove original columns
streak_drop = c("B_current_win_streak", "B_current_lose_streak", "R_current_win_streak", "R_current_lose_streak")
data_reduced = data_reduced[, !(colnames(data_reduced) %in% streak_drop)]
decision_type = c("Majority", "Split", "Unanimous")
# Sum up num of three kind of decision wins of B
B_win_by_Decision = numeric(nrow(data_reduced))
for(type in decision_type){
B_win_by_Decision = B_win_by_Decision + data_reduced[, paste("B_win_by_Decision_", type, sep = "")]
}
data_reduced = cbind(data_reduced, B_win_by_Decision)
# Sum up num of three kind of decision wins of R
R_win_by_Decision = numeric(nrow(data_reduced))
for(type in decision_type){
R_win_by_Decision = R_win_by_Decision + data_reduced[, paste("R_win_by_Decision_", type, sep = "")]
}
data_reduced = cbind(data_reduced, R_win_by_Decision)
# Remove original columns
dec_col = sapply(colnames(data_reduced), str_detect, regex("win_by_Decision_"))
data_reduced = data_reduced[, !(dec_col)]
# For ML methods
# data_reduced = data_reduced[, c(1:26, 51, 53, 55, 27:50, 52, 54, 56)]
# filename = "data_ML.csv"
# For statistical learning methods
data_reduced = data_reduced[, c(1:21, 41, 43, 45, 22:40, 42, 44, 46)]
filename = "data_body_logit.csv"
#filename = "data_position_logit.csv"
# Delete some more columns here
drop_col = c("avg_SIG_STR_pct", "avg_TD_pct", "REV", "total_time_fought", "total_round_fought", "Stance")
for(i in 1:length(drop_col)){
att_col = sapply(colnames(data_reduced), str_detect, regex(drop_col[i]))
data_reduced = data_reduced[, !(att_col)]
}
write.csv(data_reduced, filename, row.names = FALSE)
data = read.table('diabetes.txt', header=T)
data[which(data$frame == ""), "frame"] = NA
data$frame = as.factor(data$frame)
summary(data$frame)
drops=c("id","bp.2s", "bp.2d")
data=data[,!(names(data)%in%drops)]
for(i in 1:ncol(data)){
if(class(data[, i]) == "character"){
data[, i] = as.factor(data[, i])
}
}
sapply(data, class)
hist(data$glyhb, xlab = "glyhb", main="Hist of glyhb")
for(i in 1:ncol(data)){
if(class(data[, i]) == "integer" | class(data[, i]) == "numeric")
hist(data[, i], xlab = colnames(data)[i], main=colnames(data)[i])
}
for(i in 1:ncol(data)){
if(class(data[, i]) == "factor"){
n = length(data[, i])
type = levels(data[, i])
percent = round(100*table(data[, i])/n)
lab = paste(type, ": ", percent, sep='')
lab <- paste(lab, '%', sep='')
pie(table(data[, i]),labels=lab, main=colnames(data)[i])
}
}
par(mfrow=c(2, 2))
hist(log(data$glyhb), xlab = "log(glyhb)", main="Hist of log(glyhb)")
hist(sqrt(data$glyhb), xlab = "sqrt(glyhb)", main="Hist of sqrt(glyhb)")
hist(1/(data$glyhb), xlab = "1/(glyhb)", main="Hist of 1/(glyhb)")
data[, "glyhb"] = 1/(data$glyhb)
data = na.omit(data)
cor(data[, sapply(data, class) == "integer" | sapply(data, class) == "numeric"])
pairs(data[, sapply(data, class) == "integer" | sapply(data, class) == "numeric"])
par(mfrow=c(2, 2))
boxplot(data$glyhb~data$gender, main = "glyhb")
boxplot(data$glyhb~data$frame, main = "glyhb")
set.seed(10)
idx = sample(1:nrow(data), size=nrow(data)/2, replace=F)
data_train = data[idx, ]
data_valid = data[-1*idx, ]
par(mfrow=c(2, 3))
boxplot(data_train$glyhb, data_valid$glyhb, main="glyhb", names=c("train", "valid"))
boxplot(data_train$stab.glu, data_valid$stab.glu, main="stab.glu", names=c("train", "valid"))
boxplot(data_train$ratio, data_valid$ratio, main="ratio", names=c("train", "valid"))
boxplot(data_train$age, data_valid$age, main="age", names=c("train", "valid"))
boxplot(data_train$bp.1s, data_valid$bp.1s, main="bp.1s", names=c("train", "valid"))
boxplot(data_train$waist, data_valid$waist, main="waist", names=c("train", "valid"))
model1 = lm(glyhb~., data=data_train)
summary(model1)
sprintf("%d coefficients in the model.", length(model1$coefficients))
sprintf("MSE = %f.", anova(model1)['Residuals', 3])
library(MASS)
boxcox(model1)
library(leaps)
subsets = regsubsets(glyhb~., data=data_train, nbest=1, nvmax=16, method="exhaustive")
sum_sub = summary(subsets)
p = as.integer(as.numeric(rownames(sum_sub$which))+1)
n = nrow(data_train)
sse = sum_sub$rss
aic = n*log(sse/n) + 2*p
bic = n*log(sse/n) + log(n)*p
res_subset = cbind(sum_sub$which, sse, sum_sub$rsq, sum_sub$adjr2, sum_sub$cp, aic, bic)
colnames(res_subset) = c(colnames(sum_sub$which), "sse", "R^2", "R^2_a", "Cp", "aic", "bic")
res_subset
library(MASS)
model0 = lm(glyhb~1, data = data_train)
forward_step=stepAIC(model0, scope=list(upper=model1, lower=~1), direction = 'both', k=2)
forward_step$anova
par(mfrow=c(2, 2))
model_f = lm(glyhb ~ stab.glu + age + waist + ratio + time.ppn, data=data_train)
plot(model_f, which=1)
plot(model_f, which=2)
model2 = lm(glyhb~.^2, data=data_train)
#summary(model2)
sprintf("%d coefficients in the model.", length(model2$coefficients))
sprintf("MSE = %f.", anova(model2)['Residuals', 3])
forward_step2=stepAIC(model0, scope=list(upper=model2, lower=~1), direction = 'both', k=2)
forward_step2$anova
par(mfrow=c(2, 2))
model_f2 = lm(glyhb ~ stab.glu + age + waist + time.ppn + location + ratio +
stab.glu:age + stab.glu:time.ppn + location:ratio, data=data_train)
plot(model_f2, which=1)
plot(model_f2, which=2)
forward_step3=stepAIC(model0, scope=list(upper=model2, lower=~1), direction = 'forward', k=2)
forward_step3$anova
